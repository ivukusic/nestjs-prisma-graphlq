# source: http://localhost:4466
# timestamp: Tue Apr 21 2020 08:31:41 GMT+0200 (Central European Summer Time)

type AggregateComment {
  count: Int!
}

type AggregatePost {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  """
  The number of nodes that have been affected by the Batch operation.
  """
  count: Long!
}

type Comment implements Node {
  id: Int!
  text: String!
  author: User!
  post: Post!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""
A connection to a list of items.
"""
type CommentConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [CommentEdge]!
  aggregate: AggregateComment!
}

input CommentCreateInput {
  text: String!
  author: UserCreateOneWithoutCommentsInput!
  post: PostCreateOneWithoutCommentsInput!
}

input CommentCreateManyWithoutAuthorInput {
  create: [CommentCreateWithoutAuthorInput!]
  connect: [CommentWhereUniqueInput!]
}

input CommentCreateManyWithoutPostInput {
  create: [CommentCreateWithoutPostInput!]
  connect: [CommentWhereUniqueInput!]
}

input CommentCreateWithoutAuthorInput {
  text: String!
  post: PostCreateOneWithoutCommentsInput!
}

input CommentCreateWithoutPostInput {
  text: String!
  author: UserCreateOneWithoutCommentsInput!
}

"""
An edge in a connection.
"""
type CommentEdge {
  """
  The item at the end of the edge.
  """
  node: Comment!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum CommentOrderByInput {
  id_ASC
  id_DESC
  text_ASC
  text_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type CommentPreviousValues {
  id: Int!
  text: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input CommentScalarWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [CommentScalarWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [CommentScalarWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [CommentScalarWhereInput!]
  id: Int

  """
  All values that are not equal to given value.
  """
  id_not: Int

  """
  All values that are contained in given list.
  """
  id_in: [Int!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [Int!]

  """
  All values less than the given value.
  """
  id_lt: Int

  """
  All values less than or equal the given value.
  """
  id_lte: Int

  """
  All values greater than the given value.
  """
  id_gt: Int

  """
  All values greater than or equal the given value.
  """
  id_gte: Int
  text: String

  """
  All values that are not equal to given value.
  """
  text_not: String

  """
  All values that are contained in given list.
  """
  text_in: [String!]

  """
  All values that are not contained in given list.
  """
  text_not_in: [String!]

  """
  All values less than the given value.
  """
  text_lt: String

  """
  All values less than or equal the given value.
  """
  text_lte: String

  """
  All values greater than the given value.
  """
  text_gt: String

  """
  All values greater than or equal the given value.
  """
  text_gte: String

  """
  All values containing the given string.
  """
  text_contains: String

  """
  All values not containing the given string.
  """
  text_not_contains: String

  """
  All values starting with the given string.
  """
  text_starts_with: String

  """
  All values not starting with the given string.
  """
  text_not_starts_with: String

  """
  All values ending with the given string.
  """
  text_ends_with: String

  """
  All values not ending with the given string.
  """
  text_not_ends_with: String
  createdAt: DateTime

  """
  All values that are not equal to given value.
  """
  createdAt_not: DateTime

  """
  All values that are contained in given list.
  """
  createdAt_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  createdAt_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  createdAt_lt: DateTime

  """
  All values less than or equal the given value.
  """
  createdAt_lte: DateTime

  """
  All values greater than the given value.
  """
  createdAt_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  createdAt_gte: DateTime
  updatedAt: DateTime

  """
  All values that are not equal to given value.
  """
  updatedAt_not: DateTime

  """
  All values that are contained in given list.
  """
  updatedAt_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  updatedAt_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  updatedAt_lt: DateTime

  """
  All values less than or equal the given value.
  """
  updatedAt_lte: DateTime

  """
  All values greater than the given value.
  """
  updatedAt_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  updatedAt_gte: DateTime
}

type CommentSubscriptionPayload {
  mutation: MutationType!
  node: Comment
  updatedFields: [String!]
  previousValues: CommentPreviousValues
}

input CommentSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [CommentSubscriptionWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [CommentSubscriptionWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [CommentSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: CommentWhereInput
}

input CommentUpdateInput {
  text: String
  author: UserUpdateOneRequiredWithoutCommentsInput
  post: PostUpdateOneRequiredWithoutCommentsInput
}

input CommentUpdateManyDataInput {
  text: String
}

input CommentUpdateManyMutationInput {
  text: String
}

input CommentUpdateManyWithoutAuthorInput {
  create: [CommentCreateWithoutAuthorInput!]
  connect: [CommentWhereUniqueInput!]
  set: [CommentWhereUniqueInput!]
  disconnect: [CommentWhereUniqueInput!]
  delete: [CommentWhereUniqueInput!]
  update: [CommentUpdateWithWhereUniqueWithoutAuthorInput!]
  updateMany: [CommentUpdateManyWithWhereNestedInput!]
  deleteMany: [CommentScalarWhereInput!]
  upsert: [CommentUpsertWithWhereUniqueWithoutAuthorInput!]
}

input CommentUpdateManyWithoutPostInput {
  create: [CommentCreateWithoutPostInput!]
  connect: [CommentWhereUniqueInput!]
  set: [CommentWhereUniqueInput!]
  disconnect: [CommentWhereUniqueInput!]
  delete: [CommentWhereUniqueInput!]
  update: [CommentUpdateWithWhereUniqueWithoutPostInput!]
  updateMany: [CommentUpdateManyWithWhereNestedInput!]
  deleteMany: [CommentScalarWhereInput!]
  upsert: [CommentUpsertWithWhereUniqueWithoutPostInput!]
}

input CommentUpdateManyWithWhereNestedInput {
  where: CommentScalarWhereInput!
  data: CommentUpdateManyDataInput!
}

input CommentUpdateWithoutAuthorDataInput {
  text: String
  post: PostUpdateOneRequiredWithoutCommentsInput
}

input CommentUpdateWithoutPostDataInput {
  text: String
  author: UserUpdateOneRequiredWithoutCommentsInput
}

input CommentUpdateWithWhereUniqueWithoutAuthorInput {
  where: CommentWhereUniqueInput!
  data: CommentUpdateWithoutAuthorDataInput!
}

input CommentUpdateWithWhereUniqueWithoutPostInput {
  where: CommentWhereUniqueInput!
  data: CommentUpdateWithoutPostDataInput!
}

input CommentUpsertWithWhereUniqueWithoutAuthorInput {
  where: CommentWhereUniqueInput!
  update: CommentUpdateWithoutAuthorDataInput!
  create: CommentCreateWithoutAuthorInput!
}

input CommentUpsertWithWhereUniqueWithoutPostInput {
  where: CommentWhereUniqueInput!
  update: CommentUpdateWithoutPostDataInput!
  create: CommentCreateWithoutPostInput!
}

input CommentWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [CommentWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [CommentWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [CommentWhereInput!]
  id: Int

  """
  All values that are not equal to given value.
  """
  id_not: Int

  """
  All values that are contained in given list.
  """
  id_in: [Int!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [Int!]

  """
  All values less than the given value.
  """
  id_lt: Int

  """
  All values less than or equal the given value.
  """
  id_lte: Int

  """
  All values greater than the given value.
  """
  id_gt: Int

  """
  All values greater than or equal the given value.
  """
  id_gte: Int
  text: String

  """
  All values that are not equal to given value.
  """
  text_not: String

  """
  All values that are contained in given list.
  """
  text_in: [String!]

  """
  All values that are not contained in given list.
  """
  text_not_in: [String!]

  """
  All values less than the given value.
  """
  text_lt: String

  """
  All values less than or equal the given value.
  """
  text_lte: String

  """
  All values greater than the given value.
  """
  text_gt: String

  """
  All values greater than or equal the given value.
  """
  text_gte: String

  """
  All values containing the given string.
  """
  text_contains: String

  """
  All values not containing the given string.
  """
  text_not_contains: String

  """
  All values starting with the given string.
  """
  text_starts_with: String

  """
  All values not starting with the given string.
  """
  text_not_starts_with: String

  """
  All values ending with the given string.
  """
  text_ends_with: String

  """
  All values not ending with the given string.
  """
  text_not_ends_with: String
  createdAt: DateTime

  """
  All values that are not equal to given value.
  """
  createdAt_not: DateTime

  """
  All values that are contained in given list.
  """
  createdAt_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  createdAt_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  createdAt_lt: DateTime

  """
  All values less than or equal the given value.
  """
  createdAt_lte: DateTime

  """
  All values greater than the given value.
  """
  createdAt_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  createdAt_gte: DateTime
  updatedAt: DateTime

  """
  All values that are not equal to given value.
  """
  updatedAt_not: DateTime

  """
  All values that are contained in given list.
  """
  updatedAt_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  updatedAt_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  updatedAt_lt: DateTime

  """
  All values less than or equal the given value.
  """
  updatedAt_lte: DateTime

  """
  All values greater than the given value.
  """
  updatedAt_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  updatedAt_gte: DateTime
  author: UserWhereInput
  post: PostWhereInput
}

input CommentWhereUniqueInput {
  id: Int
}

scalar DateTime

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

# type Mutation {
#   createUser(data: UserCreateInput!): User!
#   createPost(data: PostCreateInput!): Post!
#   createComment(data: CommentCreateInput!): Comment!
#   updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
#   updatePost(data: PostUpdateInput!, where: PostWhereUniqueInput!): Post
#   updateComment(data: CommentUpdateInput!, where: CommentWhereUniqueInput!): Comment
#   deleteUser(where: UserWhereUniqueInput!): User
#   deletePost(where: PostWhereUniqueInput!): Post
#   deleteComment(where: CommentWhereUniqueInput!): Comment
#   upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
#   upsertPost(where: PostWhereUniqueInput!, create: PostCreateInput!, update: PostUpdateInput!): Post!
#   upsertComment(where: CommentWhereUniqueInput!, create: CommentCreateInput!, update: CommentUpdateInput!): Comment!
#   updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
#   updateManyPosts(data: PostUpdateManyMutationInput!, where: PostWhereInput): BatchPayload!
#   updateManyComments(data: CommentUpdateManyMutationInput!, where: CommentWhereInput): BatchPayload!
#   deleteManyUsers(where: UserWhereInput): BatchPayload!
#   deleteManyPosts(where: PostWhereInput): BatchPayload!
#   deleteManyComments(where: CommentWhereInput): BatchPayload!
# }

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""
An object with an ID
"""
interface Node {
  """
  The id of the object.
  """
  id: Int!
}

"""
Information about pagination in a connection.
"""
type PageInfo {
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!

  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!

  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String

  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
}

type Post {
  id: Int!
  title: String!
  body: String!
  published: Boolean!
  author: User!
  comments(
    where: CommentWhereInput
    orderBy: CommentOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Comment!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""
A connection to a list of items.
"""
type PostConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [PostEdge]!
  aggregate: AggregatePost!
}

input PostCreateInput {
  title: String!
  body: String!
  published: Boolean!
  author: UserCreateOneWithoutPostsInput!
  comments: CommentCreateManyWithoutPostInput
}

input PostCreateManyWithoutAuthorInput {
  create: [PostCreateWithoutAuthorInput!]
  connect: [PostWhereUniqueInput!]
}

input PostCreateOneWithoutCommentsInput {
  create: PostCreateWithoutCommentsInput
  connect: PostWhereUniqueInput
}

input PostCreateWithoutAuthorInput {
  title: String!
  body: String!
  published: Boolean!
  comments: CommentCreateManyWithoutPostInput
}

input PostCreateWithoutCommentsInput {
  title: String!
  body: String!
  published: Boolean!
  author: UserCreateOneWithoutPostsInput!
}

"""
An edge in a connection.
"""
type PostEdge {
  """
  The item at the end of the edge.
  """
  node: Post!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum PostOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  body_ASC
  body_DESC
  published_ASC
  published_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type PostPreviousValues {
  id: Int!
  title: String!
  body: String!
  published: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input PostScalarWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [PostScalarWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [PostScalarWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [PostScalarWhereInput!]
  id: Int

  """
  All values that are not equal to given value.
  """
  id_not: Int

  """
  All values that are contained in given list.
  """
  id_in: [Int!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [Int!]

  """
  All values less than the given value.
  """
  id_lt: Int

  """
  All values less than or equal the given value.
  """
  id_lte: Int

  """
  All values greater than the given value.
  """
  id_gt: Int

  """
  All values greater than or equal the given value.
  """
  id_gte: Int
  title: String

  """
  All values that are not equal to given value.
  """
  title_not: String

  """
  All values that are contained in given list.
  """
  title_in: [String!]

  """
  All values that are not contained in given list.
  """
  title_not_in: [String!]

  """
  All values less than the given value.
  """
  title_lt: String

  """
  All values less than or equal the given value.
  """
  title_lte: String

  """
  All values greater than the given value.
  """
  title_gt: String

  """
  All values greater than or equal the given value.
  """
  title_gte: String

  """
  All values containing the given string.
  """
  title_contains: String

  """
  All values not containing the given string.
  """
  title_not_contains: String

  """
  All values starting with the given string.
  """
  title_starts_with: String

  """
  All values not starting with the given string.
  """
  title_not_starts_with: String

  """
  All values ending with the given string.
  """
  title_ends_with: String

  """
  All values not ending with the given string.
  """
  title_not_ends_with: String
  body: String

  """
  All values that are not equal to given value.
  """
  body_not: String

  """
  All values that are contained in given list.
  """
  body_in: [String!]

  """
  All values that are not contained in given list.
  """
  body_not_in: [String!]

  """
  All values less than the given value.
  """
  body_lt: String

  """
  All values less than or equal the given value.
  """
  body_lte: String

  """
  All values greater than the given value.
  """
  body_gt: String

  """
  All values greater than or equal the given value.
  """
  body_gte: String

  """
  All values containing the given string.
  """
  body_contains: String

  """
  All values not containing the given string.
  """
  body_not_contains: String

  """
  All values starting with the given string.
  """
  body_starts_with: String

  """
  All values not starting with the given string.
  """
  body_not_starts_with: String

  """
  All values ending with the given string.
  """
  body_ends_with: String

  """
  All values not ending with the given string.
  """
  body_not_ends_with: String
  published: Boolean

  """
  All values that are not equal to given value.
  """
  published_not: Boolean
  createdAt: DateTime

  """
  All values that are not equal to given value.
  """
  createdAt_not: DateTime

  """
  All values that are contained in given list.
  """
  createdAt_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  createdAt_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  createdAt_lt: DateTime

  """
  All values less than or equal the given value.
  """
  createdAt_lte: DateTime

  """
  All values greater than the given value.
  """
  createdAt_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  createdAt_gte: DateTime
  updatedAt: DateTime

  """
  All values that are not equal to given value.
  """
  updatedAt_not: DateTime

  """
  All values that are contained in given list.
  """
  updatedAt_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  updatedAt_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  updatedAt_lt: DateTime

  """
  All values less than or equal the given value.
  """
  updatedAt_lte: DateTime

  """
  All values greater than the given value.
  """
  updatedAt_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  updatedAt_gte: DateTime
}

type PostSubscriptionPayload {
  mutation: MutationType!
  node: Post
  updatedFields: [String!]
  previousValues: PostPreviousValues
}

input PostSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [PostSubscriptionWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [PostSubscriptionWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [PostSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PostWhereInput
}

input PostUpdateInput {
  title: String
  body: String
  published: Boolean
  author: UserUpdateOneRequiredWithoutPostsInput
  comments: CommentUpdateManyWithoutPostInput
}

input PostUpdateManyDataInput {
  title: String
  body: String
  published: Boolean
}

input PostUpdateManyMutationInput {
  title: String
  body: String
  published: Boolean
}

input PostUpdateManyWithoutAuthorInput {
  create: [PostCreateWithoutAuthorInput!]
  connect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  disconnect: [PostWhereUniqueInput!]
  delete: [PostWhereUniqueInput!]
  update: [PostUpdateWithWhereUniqueWithoutAuthorInput!]
  updateMany: [PostUpdateManyWithWhereNestedInput!]
  deleteMany: [PostScalarWhereInput!]
  upsert: [PostUpsertWithWhereUniqueWithoutAuthorInput!]
}

input PostUpdateManyWithWhereNestedInput {
  where: PostScalarWhereInput!
  data: PostUpdateManyDataInput!
}

input PostUpdateOneRequiredWithoutCommentsInput {
  create: PostCreateWithoutCommentsInput
  connect: PostWhereUniqueInput
  update: PostUpdateWithoutCommentsDataInput
  upsert: PostUpsertWithoutCommentsInput
}

input PostUpdateWithoutAuthorDataInput {
  title: String
  body: String
  published: Boolean
  comments: CommentUpdateManyWithoutPostInput
}

input PostUpdateWithoutCommentsDataInput {
  title: String
  body: String
  published: Boolean
  author: UserUpdateOneRequiredWithoutPostsInput
}

input PostUpdateWithWhereUniqueWithoutAuthorInput {
  where: PostWhereUniqueInput!
  data: PostUpdateWithoutAuthorDataInput!
}

input PostUpsertWithoutCommentsInput {
  update: PostUpdateWithoutCommentsDataInput!
  create: PostCreateWithoutCommentsInput!
}

input PostUpsertWithWhereUniqueWithoutAuthorInput {
  where: PostWhereUniqueInput!
  update: PostUpdateWithoutAuthorDataInput!
  create: PostCreateWithoutAuthorInput!
}

input PostWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [PostWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [PostWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [PostWhereInput!]
  id: Int

  """
  All values that are not equal to given value.
  """
  id_not: Int

  """
  All values that are contained in given list.
  """
  id_in: [Int!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [Int!]

  """
  All values less than the given value.
  """
  id_lt: Int

  """
  All values less than or equal the given value.
  """
  id_lte: Int

  """
  All values greater than the given value.
  """
  id_gt: Int

  """
  All values greater than or equal the given value.
  """
  id_gte: Int
  title: String

  """
  All values that are not equal to given value.
  """
  title_not: String

  """
  All values that are contained in given list.
  """
  title_in: [String!]

  """
  All values that are not contained in given list.
  """
  title_not_in: [String!]

  """
  All values less than the given value.
  """
  title_lt: String

  """
  All values less than or equal the given value.
  """
  title_lte: String

  """
  All values greater than the given value.
  """
  title_gt: String

  """
  All values greater than or equal the given value.
  """
  title_gte: String

  """
  All values containing the given string.
  """
  title_contains: String

  """
  All values not containing the given string.
  """
  title_not_contains: String

  """
  All values starting with the given string.
  """
  title_starts_with: String

  """
  All values not starting with the given string.
  """
  title_not_starts_with: String

  """
  All values ending with the given string.
  """
  title_ends_with: String

  """
  All values not ending with the given string.
  """
  title_not_ends_with: String
  body: String

  """
  All values that are not equal to given value.
  """
  body_not: String

  """
  All values that are contained in given list.
  """
  body_in: [String!]

  """
  All values that are not contained in given list.
  """
  body_not_in: [String!]

  """
  All values less than the given value.
  """
  body_lt: String

  """
  All values less than or equal the given value.
  """
  body_lte: String

  """
  All values greater than the given value.
  """
  body_gt: String

  """
  All values greater than or equal the given value.
  """
  body_gte: String

  """
  All values containing the given string.
  """
  body_contains: String

  """
  All values not containing the given string.
  """
  body_not_contains: String

  """
  All values starting with the given string.
  """
  body_starts_with: String

  """
  All values not starting with the given string.
  """
  body_not_starts_with: String

  """
  All values ending with the given string.
  """
  body_ends_with: String

  """
  All values not ending with the given string.
  """
  body_not_ends_with: String
  published: Boolean

  """
  All values that are not equal to given value.
  """
  published_not: Boolean
  createdAt: DateTime

  """
  All values that are not equal to given value.
  """
  createdAt_not: DateTime

  """
  All values that are contained in given list.
  """
  createdAt_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  createdAt_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  createdAt_lt: DateTime

  """
  All values less than or equal the given value.
  """
  createdAt_lte: DateTime

  """
  All values greater than the given value.
  """
  createdAt_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  createdAt_gte: DateTime
  updatedAt: DateTime

  """
  All values that are not equal to given value.
  """
  updatedAt_not: DateTime

  """
  All values that are contained in given list.
  """
  updatedAt_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  updatedAt_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  updatedAt_lt: DateTime

  """
  All values less than or equal the given value.
  """
  updatedAt_lte: DateTime

  """
  All values greater than the given value.
  """
  updatedAt_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  updatedAt_gte: DateTime
  author: UserWhereInput
  comments_every: CommentWhereInput
  comments_some: CommentWhereInput
  comments_none: CommentWhereInput
}

input PostWhereUniqueInput {
  id: Int
}

type Query {
  users(
    where: UserWhereInput
    orderBy: UserOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [User]!
  posts(
    where: PostWhereInput
    orderBy: PostOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Post]!
  comments(
    where: CommentWhereInput
    orderBy: CommentOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Comment]!
  user(where: UserWhereUniqueInput!): User
  post(where: PostWhereUniqueInput!): Post
  comment(where: CommentWhereUniqueInput!): Comment
  usersConnection(
    where: UserWhereInput
    orderBy: UserOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): UserConnection!
  postsConnection(
    where: PostWhereInput
    orderBy: PostOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): PostConnection!
  commentsConnection(
    where: CommentWhereInput
    orderBy: CommentOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): CommentConnection!

  """
  Fetches an object given its ID
  """
  node(
    """
    The ID of an object
    """
    id: ID!
  ): Node
}

enum Role {
  ADMIN
  EDITOR
  USER
  GUEST
}

type Subscription {
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  post(where: PostSubscriptionWhereInput): PostSubscriptionPayload
  comment(where: CommentSubscriptionWhereInput): CommentSubscriptionPayload
}

type User {
  id: Int!
  address: String
  city: String
  company: String
  country: String
  email: String!
  firstName: String!
  image: String
  lastName: String!
  password: String!
  description: String
  postalCode: String
  role: Role!
  posts(
    where: PostWhereInput
    orderBy: PostOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Post!]
  comments(
    where: CommentWhereInput
    orderBy: CommentOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Comment!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""
A connection to a list of items.
"""
type UserConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  address: String
  city: String
  company: String
  country: String
  email: String!
  firstName: String!
  image: String
  lastName: String!
  password: String!
  description: String
  postalCode: String
  role: Role
  posts: PostCreateManyWithoutAuthorInput
  comments: CommentCreateManyWithoutAuthorInput
}

input UserCreateOneWithoutCommentsInput {
  create: UserCreateWithoutCommentsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutPostsInput {
  create: UserCreateWithoutPostsInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutCommentsInput {
  address: String
  city: String
  company: String
  country: String
  email: String!
  firstName: String!
  image: String
  lastName: String!
  password: String!
  description: String
  postalCode: String
  role: Role
  posts: PostCreateManyWithoutAuthorInput
}

input UserCreateWithoutPostsInput {
  address: String
  city: String
  company: String
  country: String
  email: String!
  firstName: String!
  image: String
  lastName: String!
  password: String!
  description: String
  postalCode: String
  role: Role
  comments: CommentCreateManyWithoutAuthorInput
}

"""
An edge in a connection.
"""
type UserEdge {
  """
  The item at the end of the edge.
  """
  node: User!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  address_ASC
  address_DESC
  city_ASC
  city_DESC
  company_ASC
  company_DESC
  country_ASC
  country_DESC
  email_ASC
  email_DESC
  firstName_ASC
  firstName_DESC
  image_ASC
  image_DESC
  lastName_ASC
  lastName_DESC
  password_ASC
  password_DESC
  description_ASC
  description_DESC
  postalCode_ASC
  postalCode_DESC
  role_ASC
  role_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type UserPreviousValues {
  id: Int!
  address: String
  city: String
  company: String
  country: String
  email: String!
  firstName: String!
  image: String
  lastName: String!
  password: String!
  description: String
  postalCode: String
  role: Role!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [UserSubscriptionWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [UserSubscriptionWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [UserSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateInput {
  address: String
  city: String
  company: String
  country: String
  email: String
  firstName: String
  image: String
  lastName: String
  password: String
  description: String
  postalCode: String
  role: Role
  posts: PostUpdateManyWithoutAuthorInput
  comments: CommentUpdateManyWithoutAuthorInput
}

input UserUpdateManyMutationInput {
  address: String
  city: String
  company: String
  country: String
  email: String
  firstName: String
  image: String
  lastName: String
  password: String
  description: String
  postalCode: String
  role: Role
}

input UserUpdateOneRequiredWithoutCommentsInput {
  create: UserCreateWithoutCommentsInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutCommentsDataInput
  upsert: UserUpsertWithoutCommentsInput
}

input UserUpdateOneRequiredWithoutPostsInput {
  create: UserCreateWithoutPostsInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutPostsDataInput
  upsert: UserUpsertWithoutPostsInput
}

input UserUpdateWithoutCommentsDataInput {
  address: String
  city: String
  company: String
  country: String
  email: String
  firstName: String
  image: String
  lastName: String
  password: String
  description: String
  postalCode: String
  role: Role
  posts: PostUpdateManyWithoutAuthorInput
}

input UserUpdateWithoutPostsDataInput {
  address: String
  city: String
  company: String
  country: String
  email: String
  firstName: String
  image: String
  lastName: String
  password: String
  description: String
  postalCode: String
  role: Role
  comments: CommentUpdateManyWithoutAuthorInput
}

input UserUpsertWithoutCommentsInput {
  update: UserUpdateWithoutCommentsDataInput!
  create: UserCreateWithoutCommentsInput!
}

input UserUpsertWithoutPostsInput {
  update: UserUpdateWithoutPostsDataInput!
  create: UserCreateWithoutPostsInput!
}

input UserWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [UserWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [UserWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [UserWhereInput!]
  id: Int

  """
  All values that are not equal to given value.
  """
  id_not: Int

  """
  All values that are contained in given list.
  """
  id_in: [Int!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [Int!]

  """
  All values less than the given value.
  """
  id_lt: Int

  """
  All values less than or equal the given value.
  """
  id_lte: Int

  """
  All values greater than the given value.
  """
  id_gt: Int

  """
  All values greater than or equal the given value.
  """
  id_gte: Int
  address: String

  """
  All values that are not equal to given value.
  """
  address_not: String

  """
  All values that are contained in given list.
  """
  address_in: [String!]

  """
  All values that are not contained in given list.
  """
  address_not_in: [String!]

  """
  All values less than the given value.
  """
  address_lt: String

  """
  All values less than or equal the given value.
  """
  address_lte: String

  """
  All values greater than the given value.
  """
  address_gt: String

  """
  All values greater than or equal the given value.
  """
  address_gte: String

  """
  All values containing the given string.
  """
  address_contains: String

  """
  All values not containing the given string.
  """
  address_not_contains: String

  """
  All values starting with the given string.
  """
  address_starts_with: String

  """
  All values not starting with the given string.
  """
  address_not_starts_with: String

  """
  All values ending with the given string.
  """
  address_ends_with: String

  """
  All values not ending with the given string.
  """
  address_not_ends_with: String
  city: String

  """
  All values that are not equal to given value.
  """
  city_not: String

  """
  All values that are contained in given list.
  """
  city_in: [String!]

  """
  All values that are not contained in given list.
  """
  city_not_in: [String!]

  """
  All values less than the given value.
  """
  city_lt: String

  """
  All values less than or equal the given value.
  """
  city_lte: String

  """
  All values greater than the given value.
  """
  city_gt: String

  """
  All values greater than or equal the given value.
  """
  city_gte: String

  """
  All values containing the given string.
  """
  city_contains: String

  """
  All values not containing the given string.
  """
  city_not_contains: String

  """
  All values starting with the given string.
  """
  city_starts_with: String

  """
  All values not starting with the given string.
  """
  city_not_starts_with: String

  """
  All values ending with the given string.
  """
  city_ends_with: String

  """
  All values not ending with the given string.
  """
  city_not_ends_with: String
  company: String

  """
  All values that are not equal to given value.
  """
  company_not: String

  """
  All values that are contained in given list.
  """
  company_in: [String!]

  """
  All values that are not contained in given list.
  """
  company_not_in: [String!]

  """
  All values less than the given value.
  """
  company_lt: String

  """
  All values less than or equal the given value.
  """
  company_lte: String

  """
  All values greater than the given value.
  """
  company_gt: String

  """
  All values greater than or equal the given value.
  """
  company_gte: String

  """
  All values containing the given string.
  """
  company_contains: String

  """
  All values not containing the given string.
  """
  company_not_contains: String

  """
  All values starting with the given string.
  """
  company_starts_with: String

  """
  All values not starting with the given string.
  """
  company_not_starts_with: String

  """
  All values ending with the given string.
  """
  company_ends_with: String

  """
  All values not ending with the given string.
  """
  company_not_ends_with: String
  country: String

  """
  All values that are not equal to given value.
  """
  country_not: String

  """
  All values that are contained in given list.
  """
  country_in: [String!]

  """
  All values that are not contained in given list.
  """
  country_not_in: [String!]

  """
  All values less than the given value.
  """
  country_lt: String

  """
  All values less than or equal the given value.
  """
  country_lte: String

  """
  All values greater than the given value.
  """
  country_gt: String

  """
  All values greater than or equal the given value.
  """
  country_gte: String

  """
  All values containing the given string.
  """
  country_contains: String

  """
  All values not containing the given string.
  """
  country_not_contains: String

  """
  All values starting with the given string.
  """
  country_starts_with: String

  """
  All values not starting with the given string.
  """
  country_not_starts_with: String

  """
  All values ending with the given string.
  """
  country_ends_with: String

  """
  All values not ending with the given string.
  """
  country_not_ends_with: String
  email: String

  """
  All values that are not equal to given value.
  """
  email_not: String

  """
  All values that are contained in given list.
  """
  email_in: [String!]

  """
  All values that are not contained in given list.
  """
  email_not_in: [String!]

  """
  All values less than the given value.
  """
  email_lt: String

  """
  All values less than or equal the given value.
  """
  email_lte: String

  """
  All values greater than the given value.
  """
  email_gt: String

  """
  All values greater than or equal the given value.
  """
  email_gte: String

  """
  All values containing the given string.
  """
  email_contains: String

  """
  All values not containing the given string.
  """
  email_not_contains: String

  """
  All values starting with the given string.
  """
  email_starts_with: String

  """
  All values not starting with the given string.
  """
  email_not_starts_with: String

  """
  All values ending with the given string.
  """
  email_ends_with: String

  """
  All values not ending with the given string.
  """
  email_not_ends_with: String
  firstName: String

  """
  All values that are not equal to given value.
  """
  firstName_not: String

  """
  All values that are contained in given list.
  """
  firstName_in: [String!]

  """
  All values that are not contained in given list.
  """
  firstName_not_in: [String!]

  """
  All values less than the given value.
  """
  firstName_lt: String

  """
  All values less than or equal the given value.
  """
  firstName_lte: String

  """
  All values greater than the given value.
  """
  firstName_gt: String

  """
  All values greater than or equal the given value.
  """
  firstName_gte: String

  """
  All values containing the given string.
  """
  firstName_contains: String

  """
  All values not containing the given string.
  """
  firstName_not_contains: String

  """
  All values starting with the given string.
  """
  firstName_starts_with: String

  """
  All values not starting with the given string.
  """
  firstName_not_starts_with: String

  """
  All values ending with the given string.
  """
  firstName_ends_with: String

  """
  All values not ending with the given string.
  """
  firstName_not_ends_with: String
  image: String

  """
  All values that are not equal to given value.
  """
  image_not: String

  """
  All values that are contained in given list.
  """
  image_in: [String!]

  """
  All values that are not contained in given list.
  """
  image_not_in: [String!]

  """
  All values less than the given value.
  """
  image_lt: String

  """
  All values less than or equal the given value.
  """
  image_lte: String

  """
  All values greater than the given value.
  """
  image_gt: String

  """
  All values greater than or equal the given value.
  """
  image_gte: String

  """
  All values containing the given string.
  """
  image_contains: String

  """
  All values not containing the given string.
  """
  image_not_contains: String

  """
  All values starting with the given string.
  """
  image_starts_with: String

  """
  All values not starting with the given string.
  """
  image_not_starts_with: String

  """
  All values ending with the given string.
  """
  image_ends_with: String

  """
  All values not ending with the given string.
  """
  image_not_ends_with: String
  lastName: String

  """
  All values that are not equal to given value.
  """
  lastName_not: String

  """
  All values that are contained in given list.
  """
  lastName_in: [String!]

  """
  All values that are not contained in given list.
  """
  lastName_not_in: [String!]

  """
  All values less than the given value.
  """
  lastName_lt: String

  """
  All values less than or equal the given value.
  """
  lastName_lte: String

  """
  All values greater than the given value.
  """
  lastName_gt: String

  """
  All values greater than or equal the given value.
  """
  lastName_gte: String

  """
  All values containing the given string.
  """
  lastName_contains: String

  """
  All values not containing the given string.
  """
  lastName_not_contains: String

  """
  All values starting with the given string.
  """
  lastName_starts_with: String

  """
  All values not starting with the given string.
  """
  lastName_not_starts_with: String

  """
  All values ending with the given string.
  """
  lastName_ends_with: String

  """
  All values not ending with the given string.
  """
  lastName_not_ends_with: String
  password: String

  """
  All values that are not equal to given value.
  """
  password_not: String

  """
  All values that are contained in given list.
  """
  password_in: [String!]

  """
  All values that are not contained in given list.
  """
  password_not_in: [String!]

  """
  All values less than the given value.
  """
  password_lt: String

  """
  All values less than or equal the given value.
  """
  password_lte: String

  """
  All values greater than the given value.
  """
  password_gt: String

  """
  All values greater than or equal the given value.
  """
  password_gte: String

  """
  All values containing the given string.
  """
  password_contains: String

  """
  All values not containing the given string.
  """
  password_not_contains: String

  """
  All values starting with the given string.
  """
  password_starts_with: String

  """
  All values not starting with the given string.
  """
  password_not_starts_with: String

  """
  All values ending with the given string.
  """
  password_ends_with: String

  """
  All values not ending with the given string.
  """
  password_not_ends_with: String
  description: String

  """
  All values that are not equal to given value.
  """
  description_not: String

  """
  All values that are contained in given list.
  """
  description_in: [String!]

  """
  All values that are not contained in given list.
  """
  description_not_in: [String!]

  """
  All values less than the given value.
  """
  description_lt: String

  """
  All values less than or equal the given value.
  """
  description_lte: String

  """
  All values greater than the given value.
  """
  description_gt: String

  """
  All values greater than or equal the given value.
  """
  description_gte: String

  """
  All values containing the given string.
  """
  description_contains: String

  """
  All values not containing the given string.
  """
  description_not_contains: String

  """
  All values starting with the given string.
  """
  description_starts_with: String

  """
  All values not starting with the given string.
  """
  description_not_starts_with: String

  """
  All values ending with the given string.
  """
  description_ends_with: String

  """
  All values not ending with the given string.
  """
  description_not_ends_with: String
  postalCode: String

  """
  All values that are not equal to given value.
  """
  postalCode_not: String

  """
  All values that are contained in given list.
  """
  postalCode_in: [String!]

  """
  All values that are not contained in given list.
  """
  postalCode_not_in: [String!]

  """
  All values less than the given value.
  """
  postalCode_lt: String

  """
  All values less than or equal the given value.
  """
  postalCode_lte: String

  """
  All values greater than the given value.
  """
  postalCode_gt: String

  """
  All values greater than or equal the given value.
  """
  postalCode_gte: String

  """
  All values containing the given string.
  """
  postalCode_contains: String

  """
  All values not containing the given string.
  """
  postalCode_not_contains: String

  """
  All values starting with the given string.
  """
  postalCode_starts_with: String

  """
  All values not starting with the given string.
  """
  postalCode_not_starts_with: String

  """
  All values ending with the given string.
  """
  postalCode_ends_with: String

  """
  All values not ending with the given string.
  """
  postalCode_not_ends_with: String
  role: Role

  """
  All values that are not equal to given value.
  """
  role_not: Role

  """
  All values that are contained in given list.
  """
  role_in: [Role!]

  """
  All values that are not contained in given list.
  """
  role_not_in: [Role!]
  createdAt: DateTime

  """
  All values that are not equal to given value.
  """
  createdAt_not: DateTime

  """
  All values that are contained in given list.
  """
  createdAt_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  createdAt_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  createdAt_lt: DateTime

  """
  All values less than or equal the given value.
  """
  createdAt_lte: DateTime

  """
  All values greater than the given value.
  """
  createdAt_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  createdAt_gte: DateTime
  updatedAt: DateTime

  """
  All values that are not equal to given value.
  """
  updatedAt_not: DateTime

  """
  All values that are contained in given list.
  """
  updatedAt_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  updatedAt_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  updatedAt_lt: DateTime

  """
  All values less than or equal the given value.
  """
  updatedAt_lte: DateTime

  """
  All values greater than the given value.
  """
  updatedAt_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  updatedAt_gte: DateTime
  posts_every: PostWhereInput
  posts_some: PostWhereInput
  posts_none: PostWhereInput
  comments_every: CommentWhereInput
  comments_some: CommentWhereInput
  comments_none: CommentWhereInput
}

input UserWhereUniqueInput {
  id: Int
  email: String
}
